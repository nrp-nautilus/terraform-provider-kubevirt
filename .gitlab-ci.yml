stages:
  - test
  - go-test
  - fetch-github-results
  - sync-github

test:
  stage: test
  image: alpine:latest
  script:
    - echo "Hello World"
    - echo "Simple CI/CD test"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

go-test:
  stage: go-test
  image: golang:1.21-alpine
  before_script:
    - apk add --no-cache git wget unzip
    - wget -O terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
    - unzip terraform.zip
    - mv terraform /usr/local/bin/
    - terraform version
    - go mod download
    - go mod verify
  script:
    - echo "Running Go tests..."
    - go test -v ./...
    - echo "Running Go vet..."
    - go vet ./...
    - echo "Running Go fmt check..."
    - go fmt ./...
    - echo "âœ… Go tests completed successfully!"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

fetch-github-results:
  stage: fetch-github-results
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Phase 3 Basic GitHub API check"
    - echo "Main branch check stage"
    - echo "Checking GitHub API"
    - echo "Basic test will add GitHub logic later"
    - echo "Phase 3 completed successfully"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  dependencies: []

sync-github:
  stage: sync-github
  image: alpine:latest
  before_script:
    - apk add --no-cache git curl jq
  script:
    - echo "Phase 4 Real GitHub sync starting HTTPS with token"
    - echo "Setting up git with GitHub token"
    - git config --global user.email "ci@gitlab.nrp-nautilus.io"
    - git config --global user.name "GitLab CI"
    - echo "Pushing to GitHub main branch from GitLab working directory"
    - cd /builds/nrp/kubevirt-terraform-provider
    - git remote add github https://x-access-token:${GITHUB_TOKEN}@github.com/nrp-nautilus/terraform-provider-kubevirt.git
    - echo "Pushing current GitLab HEAD to GitHub main branch"
    - git push github HEAD:main --force --verbose
    - echo "Git push exit code $?"
    - echo "Phase 4 GitHub sync completed successfully"
    - echo "Validating GitHub received our code"
    - sleep 10
    - echo "Checking if GitHub Actions workflow started and succeeded"
    - AUTH_HEADER="Authorization token ${GITHUB_TOKEN}"
    - curl -s -H "$AUTH_HEADER" "https://api.github.com/repos/nrp-nautilus/terraform-provider-kubevirt/actions/runs?per_page=1" > workflow_response.json
    - WORKFLOW_RUNS=$(jq '.workflow_runs | length' workflow_response.json)
    - echo "Workflow runs found $WORKFLOW_RUNS"
    - if [ "$WORKFLOW_RUNS" -eq 0 ]; then
    -   echo "ERROR No GitHub Actions runs found Pipeline should fail"
    -   exit 1
    - fi
    - echo "GitHub Actions workflow found checking status"
    - LATEST_RUN_ID=$(jq -r '.workflow_runs[0].id' workflow_response.json)
    - echo "Latest run ID $LATEST_RUN_ID"
    - curl -s -H "$AUTH_HEADER" "https://api.github.com/repos/nrp-nautilus/terraform-provider-kubevirt/actions/runs/$LATEST_RUN_ID" > run_details.json
    - RUN_STATUS=$(jq -r '.status' run_details.json)
    - RUN_CONCLUSION=$(jq -r '.conclusion' run_details.json)
    - echo "Run status $RUN_STATUS conclusion $RUN_CONCLUSION"
    - if [ "$RUN_STATUS" = "completed" ] && [ "$RUN_CONCLUSION" = "success" ]; then
    -   echo "GitHub Actions workflow completed successfully validation passed"
    - else
    -   echo "ERROR GitHub Actions workflow failed or incomplete Pipeline should fail"
    -   echo "Status $RUN_STATUS Conclusion $RUN_CONCLUSION"
    -   exit 1
    - fi
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  dependencies: []
