stages:
  - test
  - fetch-github-results
  - release
  - sync-github

variables:
  GO_VERSION: "1.21"
  PROVIDER_NAME: "kubevirt"
  PROVIDER_NAMESPACE: "nrp"

# Test stage
test:
  stage: test
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git wget unzip
    - wget -O terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
    - unzip terraform.zip
    - mv terraform /usr/local/bin/
    - terraform version
    - go mod download
    - go mod verify
  script:
    - go test -v ./...
    - go vet ./...
    - go fmt ./...
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Fetch GitHub Build Results stage
fetch-github-results:
  stage: fetch-github-results
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "üîç Fetching build results from GitHub..."
    - echo "Tag: ${CI_COMMIT_TAG}"
    - echo "‚è≥ Waiting for GitHub Actions to complete..."
    
    # Wait for GitHub Actions to complete (with timeout)
    - TIMEOUT=300
    - ELAPSED=0
    - |
      while [ $ELAPSED -lt $TIMEOUT ]; do
        echo "‚è≥ Waiting for GitHub Actions to complete... (${ELAPSED}s elapsed)"
        
        # Check if GitHub release exists
        RELEASE_URL="https://api.github.com/repos/nrp-nautilus/terraform-provider-kubevirt/releases/tags/${CI_COMMIT_TAG}"
        RESPONSE=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "$RELEASE_URL")
        
        if echo "$RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
          echo "‚úÖ GitHub release found!"
          echo "$RESPONSE" | jq '.name, .tag_name, .html_url'
          break
        fi
        
        sleep 30
        ELAPSED=$((ELAPSED + 30))
      done
      
      if [ $ELAPSED -ge $TIMEOUT ]; then
        echo "‚ùå Timeout waiting for GitHub Actions to complete"
        exit 1
      fi
    
    # Download the built binaries from GitHub release
    - echo "üì• Downloading binaries from GitHub release..."
    - ASSETS_URL="https://api.github.com/repos/nrp-nautilus/terraform-provider-kubevirt/releases/tags/${CI_COMMIT_TAG}/assets"
    - ASSETS=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "$ASSETS_URL")
    - mkdir -p bin
    
    # Download each asset
    - |
      echo "$ASSETS" | jq -r '.[].browser_download_url' | while read -r URL; do
        if [ -n "$URL" ]; then
          FILENAME=$(basename "$URL")
          echo "Downloading: $FILENAME"
          curl -L -H "Authorization: token ${GITHUB_TOKEN}" -o "bin/$FILENAME" "$URL"
        fi
      done
    
    - ls -la bin/
    
    # Verify binaries exist
    - |
      if [ ! -f "bin/terraform-provider-${PROVIDER_NAME}_${CI_COMMIT_SHA}" ]; then
        echo "‚ùå Linux binary not found in GitHub release"
        exit 1
      fi
      
      if [ ! -f "bin/terraform-provider-${PROVIDER_NAME}_${CI_COMMIT_SHA}_darwin" ]; then
        echo "‚ùå Darwin binary not found in GitHub release"
        exit 1
      fi
      
      echo "‚úÖ All binaries downloaded successfully from GitHub!"
  artifacts:
    paths:
      - bin/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG
  dependencies: []

# Release stage
release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - echo "Creating release for version ${CI_COMMIT_TAG}"
  script:
    - |
      release-cli create \
        --name "Release ${CI_COMMIT_TAG}" \
        --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"terraform-provider-${PROVIDER_NAME}-linux-amd64\",\"url\":\"${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_TAG}/raw/bin/terraform-provider-${PROVIDER_NAME}_${CI_COMMIT_SHA}?job=fetch-github-results\"}" \
        --assets-link "{\"name\":\"terraform-provider-${PROVIDER_NAME}-darwin-amd64\",\"url\":\"${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_TAG}/raw/bin/terraform-provider-${PROVIDER_NAME}_${CI_COMMIT_SHA}_darwin?job=fetch-github-results\"}"
  rules:
    - if: $CI_COMMIT_TAG
  dependencies:
    - fetch-github-results

# GitHub Sync stage
sync-github:
  stage: sync-github
  image: alpine:latest
  before_script:
    - apk add --no-cache git
    - git config --global user.name "GitLab CI"
    - git config --global user.email "ci@gitlab.nrp-nautilus.io"
  script:
    # Ensure we're working with clean source code only
    - echo "üßπ Ensuring clean source code sync..."
    - git status
    - git remote add github https://x-access-token:${GITHUB_TOKEN}@github.com/nrp-nautilus/terraform-provider-kubevirt.git
    - git fetch origin
    # Only push source code, no binaries
    - git push github main --force
    - git push github --tags --force
    - echo "‚úÖ Successfully synced SOURCE CODE ONLY to GitHub"
    - echo "üì¶ Binaries are stored as GitLab artifacts, not in repos"
  rules:
    - if: $CI_COMMIT_TAG
  dependencies:
    - release
