stages:
  - test
  - fetch-github-results
  - release
  - sync-github

variables:
  GO_VERSION: "1.21"
  PROVIDER_NAME: "kubevirt"
  PROVIDER_NAMESPACE: "nrp"

# Test stage
test:
  stage: test
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git wget unzip
    - wget -O terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
    - unzip terraform.zip
    - mv terraform /usr/local/bin/
    - terraform version
    - go mod download
    - go mod verify
  script:
    - go test -v ./...
    - go vet ./...
    - go fmt ./...
  rules:
    - if: $CI_COMMIT_TAG

# Fetch GitHub Build Results stage
fetch-github-results:
  stage: fetch-github-results
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "üîç Fetching build results from GitHub..."
    - echo "Tag: ${CI_COMMIT_TAG}"
    - echo "‚è≥ Checking if GitHub release exists..."
    - RELEASE_URL="https://api.github.com/repos/nrp-nautilus/terraform-provider-kubevirt/releases/tags/${CI_COMMIT_TAG}"
    - RESPONSE=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "$RELEASE_URL")
    - echo "GitHub API Response: $RESPONSE"
    - echo "üì• Downloading binaries from GitHub release..."
    - ASSETS_URL="https://api.github.com/repos/nrp-nautilus/terraform-provider-kubevirt/releases/tags/${CI_COMMIT_TAG}/assets"
    - ASSETS=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "$ASSETS_URL")
    - echo "Assets: $ASSETS"
    - mkdir -p bin
    - echo "Created bin directory"
    - ls -la
    - echo "‚úÖ Basic setup complete - will implement full logic in next iteration"
  artifacts:
    paths:
      - bin/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG
  dependencies: []
