# Force fresh workflow run - Thu Aug 22 00:45:00 EDT 2025 - Fixed platform binaries with .zip extension
name: Continuous Build Terraform Provider

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  PROVIDER_NAME: 'kubevirt'

# Add explicit permissions for creating releases
permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Terraform
        run: |
          wget -O terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          terraform version

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: |
          go test -v ./...
          go vet ./...
          go fmt ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build provider
        run: |
          mkdir -p bin
          # Build with dynamic version from github.run_number
          VERSION="v0.1.${{ github.run_number }}"
          echo "Building version: $VERSION"
          
          # Build Linux amd64 binary
          GOOS=linux GOARCH=amd64 go build -o bin/terraform-provider-kubevirt-linux-amd64 .
          
          # Build Linux arm64 binary
          GOOS=linux GOARCH=arm64 go build -o bin/terraform-provider-kubevirt-linux-arm64 .
          
          # Build Darwin amd64 binary  
          GOOS=darwin GOARCH=amd64 go build -o bin/terraform-provider-kubevirt-darwin-amd64 .
          
          # Build Darwin arm64 binary
          GOOS=darwin GOARCH=arm64 go build -o bin/terraform-provider-kubevirt-darwin-arm64 .
          
          # Create zip files with proper naming convention for Terraform Cloud
          cd bin
          zip "terraform-provider-${PROVIDER_NAME}_${VERSION#v}_linux_amd64.zip" terraform-provider-kubevirt-linux-amd64
          zip "terraform-provider-${PROVIDER_NAME}_${VERSION#v}_linux_arm64.zip" terraform-provider-kubevirt-linux-arm64
          zip "terraform-provider-${PROVIDER_NAME}_${VERSION#v}_darwin_amd64.zip" terraform-provider-kubevirt-darwin-amd64
          zip "terraform-provider-${PROVIDER_NAME}_${VERSION#v}_darwin_arm64.zip" terraform-provider-kubevirt-darwin-arm64
          
          echo "Created files:"
          # Rename binaries inside zip files to correct Terraform provider name
          echo "Renaming binaries inside zip files to terraform-provider-kubevirt..."
          for zipfile in *.zip; do
            echo "Processing $zipfile..."
            # Extract the zip
            unzip -q "$zipfile"
            # Remove the old binary
            rm terraform-provider-kubevirt-*
            # Create the correctly named binary (copy from the extracted one)
            cp terraform-provider-kubevirt-* terraform-provider-kubevirt
            # Recreate the zip with the correct binary name
            rm "$zipfile"
            zip "$zipfile" terraform-provider-kubevirt
            # Clean up extracted files
            rm terraform-provider-kubevirt*
          done
          
          echo "Final zip files with correct binary names:"
          ls -la *.zip
          ls -la *.zip
          ls -la *.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: provider-binaries
          path: bin/
          retention-days: 7

      - name: Generate SHA256 checksums
        run: |
          cd bin
          # Use dynamic version from github.run_number
          VERSION="v0.1.${{ github.run_number }}"
          echo "Generating checksums for version: $VERSION"
          shasum -a 256 *.zip > "terraform-provider-${PROVIDER_NAME}_${VERSION#v}_SHA256SUMS"
          echo "SHA256SUMS content:"
          cat "terraform-provider-${PROVIDER_NAME}_${VERSION#v}_SHA256SUMS"
          echo "Current directory contents:"
          ls -la

      - name: Setup GPG
        run: |
          echo "Setting up GPG..."
          echo "GPG_PRIVATE_KEY exists: ${{ secrets.GPG_PRIVATE_KEY != '' }}"
          echo "GPG_PASSPHRASE exists: ${{ secrets.GPG_PASSPHRASE != '' }}"
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --yes --import
          echo "GPG setup completed"

      - name: Sign SHA256SUMS
        run: |
          echo "Signing SHA256SUMS..."
          cd bin
          VERSION="v0.1.${{ github.run_number }}"
          echo "Signing checksums for version: $VERSION"
          # Use .sig extension like synlestidae provider
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign "terraform-provider-${PROVIDER_NAME}_${VERSION#v}_SHA256SUMS"
          echo "Signed SHA256SUMS.sig content:"
          cat "terraform-provider-${PROVIDER_NAME}_${VERSION#v}_SHA256SUMS.sig"
          echo "Signing completed"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bin/terraform-provider-kubevirt_0.1.${{ github.run_number }}_SHA256SUMS
            bin/terraform-provider-kubevirt_0.1.${{ github.run_number }}_SHA256SUMS.sig
            bin/terraform-provider-kubevirt_0.1.${{ github.run_number }}_linux_amd64.zip
            bin/terraform-provider-kubevirt_0.1.${{ github.run_number }}_linux_arm64.zip
            bin/terraform-provider-kubevirt_0.1.${{ github.run_number }}_darwin_amd64.zip
            bin/terraform-provider-kubevirt_0.1.${{ github.run_number }}_darwin_arm64.zip
          generate_release_notes: true
          tag_name: "v0.1.${{ github.run_number }}"
          name: "Release v0.1.${{ github.run_number }} - ${{ github.sha }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
